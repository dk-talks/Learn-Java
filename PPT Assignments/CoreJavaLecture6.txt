Q1.What is Collection in Java?
Ans - 
    In Java, a collection is a way to group multiple objects together. It provides operations to add, remove, and access elements in a group. There are different types of collections, 
    such as lists (ordered collections that allow duplicates), sets (collections that only store unique elements), and maps (collections that store key-value pairs).
    
    Java's collection framework includes interfaces like Collection, List, Set, and Map, which define the basic behavior and operations for collections. There are also implementation 
    classes like ArrayList, LinkedList, and HashSet that provide specific implementations of these interfaces.
    
    Collections in Java are useful for tasks like storing and manipulating data, searching for elements, sorting, filtering, and iterating over the elements of a group. They offer a
    convenient way to manage groups of objects in Java programs.


 Q.2 - Differentiate between Collection and collections in the context of Java.
Ans - 
    In the context of Java, "Collection" (with a capital 'C') refers to the root interface in the Java Collections Framework. It is part of the java.util package and defines the fundamental 
    behavior and operations for working with groups of objects.

    On the other hand, "collections" (with a lowercase 'c') is a more general term that refers to the concept of grouping multiple objects together. It can encompass any data structure or 
    mechanism that allows you to store, retrieve, and manipulate a group of objects.

    In summary, "Collection" specifically refers to the Java Collections Framework's interface, while "collections" is a broader term that can refer to any grouping of objects, including those 
    implemented using Java's Collection interface or other custom data structures.


Q3. What are the advantages of the Collection framework?
Ans - 
    The Collection framework in Java offers several advantages, making it a powerful and widely used feature in Java programming. Some of the key advantages include:
    Reusable and standardized APIs: Collection framework provides standardized interfaces and classes for code reusability.

    Flexibility and modularity: Offers various collection types suited for different purposes and allows easy swapping of implementations.
    
    Efficient data storage and retrieval: Provides optimized implementations for storage and retrieval operations.
    
    Algorithms and utilities: Includes pre-defined algorithms and utilities for sorting, searching, filtering, and transforming collections.
    
    Thread-safe synchronization: Offers synchronized collection classes for safe multi-threaded access.
    
    Interoperability and compatibility: Integrates well with other Java features, APIs, and frameworks for seamless usage.


